// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String      @unique(map: "product_slug_idx")
  category    String
  images      String[]
  brand       String
  description String
  stock       Int
  price       Decimal     @default(0) @db.Decimal(12, 2)
  rating      Decimal     @default(0) @db.Decimal(3, 2)
  numReviews  Int         @default(0)
  isFeatured  Boolean     @default(false)
  banner      String?
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  updateAt    DateTime    @updatedAt @db.Timestamp(6)
  OrderItem   OrderItem[]
}

// Prisma User Model for Auth
model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Custom fields
  password      String?
  role          String  @default("user")
  address       Json?   @db.Json
  paymentMethod String?
  Cart          Cart?
  Order         Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Cart {
  id            String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionCartId String  @db.Uuid
  items         Json[]  @default([]) @db.Json
  shippingPrice Decimal @default(0) @db.Decimal(12, 2)
  taxPrice      Decimal @default(0) @db.Decimal(12, 2)

  userId String? @unique @db.Uuid
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shippingAddress Json        @db.Json
  paymentMethod   String
  paypalResult    Json?       @db.Json
  itemsPrice      Decimal     @db.Decimal(12, 2)
  shippingPrice   Decimal     @db.Decimal(12, 2)
  taxPrice        Decimal     @db.Decimal(12, 2)
  totalPrice      Decimal     @db.Decimal(12, 2)
  isPaid          Boolean     @default(false)
  isDelivered     Boolean     @default(false)
  paidAt          DateTime?   @db.Timestamp(6)
  deliveredAt     DateTime?   @db.Timestamp(6)
  OrderItem       OrderItem[]

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  name     String
  slug     String
  image    String
  quantity Int
  price    Decimal @db.Decimal(12, 2)

  orderId String @db.Uuid
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String  @db.Uuid
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "order_item_idx")
}
